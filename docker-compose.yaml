services:
  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    env_file:
      - .env
    environment:
      - "WATCHTOWER_NOTIFICATIONS=shoutrrr"
      - "WATCHTOWER_NOTIFICATION_URL=${WATCHTOWER_NOTIFICATION_URL}"
    command:
      - "--label-enable"
      - "--interval"
      - "30"
      - "--rolling-restart"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  reverse-proxy:
    image: nginx:latest
    container_name: reverse-proxy
    restart: always
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
    expose:
      - 80
    networks:
      - network
    depends_on:
      backend:
        condition: service_healthy

  backend:
    image: liberatorist/bpl2-backend:0.0.1
    container_name: backend
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    volumes:
      - .env:/app/.env
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 8000 || exit 1"]
      interval: 5s
      timeout: 1s
      retries: 1
    networks:
      - network
  frontend:
    image: liberatorist/bpl2-frontend:0.0.1
    container_name: frontend
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    networks:
      - network
  discord-bot:
    image: liberatorist/bpl2-discord-bot:0.0.0
    container_name: discord-bot
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    volumes:
      - .env:/app/.env
    networks:
      - network
    depends_on:
      backend:
        condition: service_healthy

  db:
    image: postgres:17.2-alpine
    container_name: db
    restart: always
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      - PGUSER=${POSTGRES_USER}
    env_file: .env
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 5s
      timeout: 1s
      retries: 1
    networks:
      - network

volumes:
  db_data:

networks:
  network:
