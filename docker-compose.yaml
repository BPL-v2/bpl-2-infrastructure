services:
  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    env_file:
      - .env
    environment:
      - "WATCHTOWER_NOTIFICATIONS=shoutrrr"
      - "WATCHTOWER_NOTIFICATION_URL=${WATCHTOWER_NOTIFICATION_URL}"
    command:
      - "--label-enable"
      - "--interval"
      - "30"
      - "--rolling-restart"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  reverse-proxy:
    image: nginx:latest
    container_name: reverse-proxy
    restart: always
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
    expose:
      - 80
    networks:
      - network
    depends_on:
      backend:
        condition: service_healthy

  backend:
    image: liberatorist/bpl2-backend:0.0.1
    container_name: backend
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    volumes:
      - .env:/app/.env
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 8000 || exit 1"]
      interval: 5s
      timeout: 1s
      retries: 1
    networks:
      - network

  frontend:
    image: liberatorist/bpl2-frontend:0.0.1
    container_name: frontend
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    networks:
      - network

  discord-bot:
    image: liberatorist/bpl2-discord-bot:0.0.0
    container_name: discord-bot
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    volumes:
      - .env:/app/.env
    networks:
      - network
    depends_on:
      backend:
        condition: service_healthy

  db:
    image: postgres:17.2-alpine
    container_name: db
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      - PGUSER=${POSTGRES_USER}
    env_file: .env
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 5s
      timeout: 1s
      retries: 1
    networks:
      - network

  kafka:
    container_name: kafka
    image: apache/kafka:3.9.0
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${PWD}/kafka-logs:/tmp/kraft-combined-logs
    networks:
      - network
    environment:
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_LISTENERS: PLAINTEXT://kafka:9092,CONTROLLER://kafka:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_LOG_FLUSH_INTERVAL_MESSAGES: 1

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - network

  loki:
    image: grafana/loki:3.4
    container_name: loki
    volumes:
      - ./loki-config.yml:/etc/loki/local-config.yaml
      - ./loki-data:/loki
    networks:
      - network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SERVER_ROOT_URL=http://localhost/monitoring/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    env_file: .env
    volumes:
      - ./grafana.ini:/etc/grafana/grafana.ini
      - grafana-storage:/var/lib/grafana
    networks:
      - network

  promtail:
    image: grafana/promtail:3.4
    container_name: promtail
    volumes:
      - ./promtail-config.yml:/etc/promtail/config.yml
      - /var/log:/var/log
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - network

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    environment:
      DATA_SOURCE_URI: db:5432/postgres?sslmode=disable
      DATA_SOURCE_USER: ${POSTGRES_USER}
      DATA_SOURCE_PASS: ${POSTGRES_PASSWORD}
    env_file:
      - .env
    links:
      - db
      - prometheus
    networks:
      - network
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    networks:
      - network

volumes:
  db_data:
  loki_data:
  grafana-storage:

networks:
  network:
